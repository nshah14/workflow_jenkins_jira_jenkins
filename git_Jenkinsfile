#!/usr/bin/env groovy
def validate
node {
    checkout scm
    def rootDir = pwd()
    println("Current Directory: " + rootDir)
    validate = load "${rootDir}/validate.groovy"  
    // validate.printSomething()
    props = readProperties file:'dev.txt'
    NOCHANGE_STATUS=props['NOCHANGE_STATUS']
    IN_PROGRESS_ID=props['IN_PROGRESS_ID']
    TO_DO_ID=props['TO_DO_ID']
    DEPLOY_TO_TEST_ID =props['DEPLOY_TO_TEST_ID']
    DEVELOPMENT_COMPLETE_ID=props['DEVELOPMENT_COMPLETE']
    PROJECT=props['PROJECT']
    SITE=props['SITE']
    IN_PROGRESS_KEY=props['IN_PROGRESS_KEY']
    DEVELOPMENT_COMPLETE_KEY=props['DEVELOPMENT_COMPLETE_KEY']
    TO_DO_KEY=props['TO_DO_KEY']
    credential='credentialsJira'
    PARENT_ISSUE_TYPE=props['PARENT_ISSUE_TYPE']
    PARENT_ISSUE_RELATE=props['PARENT_ISSUE_RELATE']
    PARENT_ISSUE_STATUS=props['PARENT_ISSUE_STATUS']    
    JIRA_BASE_URL=props['JIRA_BASE_URL']
    JIRA_REST_EXT=props['JIRA_REST_EXT']
    ISSUE_TYPE_EPIC= props['ISSUE_TYPE_EPIC']
    PARENT_ISSUE_STATUS_DEV_COMP=props['PARENT_ISSUE_STATUS_DEV_COMP']
    PARENT_ISSUE_STATUS_IN_PRO=props['PARENT_ISSUE_STATUS_IN_PRO']
}

pipeline {
  
    agent { label 'build' }
    environment {
        JIRA_ISSUE_KEY='none'
        //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
        BUILD_RELEASE_VERSION = readMavenPom().getVersion().replace("-SNAPSHOT", ".1.1")
        IS_SNAPSHOT = readMavenPom().getVersion().endsWith("-SNAPSHOT")
        NEW_VERSION = readMavenPom().getVersion()
        JIRA_SITE='JIRA'
        SVN_COMMIT_MSG="empty msg"
        GIT_COMMIT_MSG = sh(script: 'git log -1 --oneline')
        GIT_COMMIT_AUTHOR = sh(script: 'git log --format="medium" -1 ${GIT_COMMIT}')
        GIT_COMMIT_PRETTY = sh(script: 'git log -1 --pretty=%B' , returnStdout: true).trim()
    }
    tools { 
        jdk 'jdk'
        maven 'maven 3.5.3' 
    }
    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                   
                ''' 
            }
        }


        stage ('Build') {
            
            steps {
              
                echo " Project version is ${VERSION}"
                echo "Artifact id is ${IMAGE}"
                echo "Build release version is ${BUILD_RELEASE_VERSION}"
                echo " is it snapshot ${IS_SNAPSHOT}"
                echo "commit log ${GIT_COMMIT_MSG}"
            
                script{
                    environment {
                        NEW_VERSION = readMavenPom().getVersion()
                        echo " Project new  version is ${NEW_VERSION}"
                    }
                }
                
                 sh '''
                    
                    mvn clean install

                ''' 
                script{
                    environment {
                        NEW_VERSION = readMavenPom().getVersion()
                        echo " Project new  version in build is ${NEW_VERSION}"
                    }
                }
            }
        }
        stage('Artifact To Nexus'){
            steps{
                sh '''
                    mvn deploy
                ''' 
            }
        }
        stage('Update JIRA status') {
           
            steps{
                 script{
                        // def fixVersion
                        def serverInfo = jiraGetServerInfo()
                        echo "in Jira Stage"
                        def fixVersion
                        def versionId
                        def fixNewVersion
                            try{

                                fixNewVersion =  jiraNewVersion version: [name: "${VERSION}",
                                                                            project: "${PROJECT}"]
                                fixVersion = fixNewVersion.data

                            }
                            catch(Exception e){
                                echo "version already exist re use the existing one"
                                
                                def searchVersion = jiraJqlSearch jql: " fixVersion=${VERSION}"
                                echo "searchVersion"+searchVersion
                            
                                for (i = 0; i <searchVersion.data.issues.size(); i++) {
                                    fixVersion= searchVersion.data.issues[i].fields.fixVersions[0]
                                    versionId = searchVersion.data.issues[i].fields.fixVersions.id[0]
                                }
                                echo "version id "+versionId
                                echo "fixversion  id "+fixVersion
                            }
                        
                        println "${GIT_COMMIT_PRETTY}".tokenize("-")
                        "${GIT_COMMIT_PRETTY}".tokenize(",").each {


                                println "Number ${it}"
                                JIRA_ISSUE_KEY = it
                                def searchResults = jiraJqlSearch jql: "project = ${PROJECT} AND issuekey = ${it}"
                                def issues = searchResults.data.issues
                                jiraComment(issueKey: "${it}",
                                    body: " Project issue fix  version is ${VERSION}"
                                )
                                validate.setTransitions(DEVELOPMENT_COMPLETE_ID, "${it}", SITE)
                                echo "Moved to development complete"
                                // fixVersion = VERSION;
                                def testIssue = [fields: [fixVersions: [fixVersion]]]
                                response = jiraEditIssue idOrKey: it, issue: testIssue
                                
                            }
                        
                 }
            }
        }
       stage('Move parent jira to desired state'){
        steps{
            script{
                try
                {
                    def fields = jiraGetFields idOrKey: '${JIRA_ISSUE_KEY}', site: "${SITE}"
                  
                    echo "issue key is ${JIRA_ISSUE_KEY}"
                    def linked_issues = jiraJqlSearch jql:"project = ${PROJECT} AND issue in linkedIssues(${JIRA_ISSUE_KEY})",site: "${SITE}"
                    def linked_issue_status = jiraJqlSearch jql:"project = ${PROJECT} AND issue in linkedIssues(${JIRA_ISSUE_KEY}) AND status = '${DEVELOPMENT_COMPLETE_KEY}'",site: "${SITE}"
                    def issues_with_status = linked_issue_status.data.issues
                    echo " size of the array which has linked issue status"+issues_with_status.size()
                
                    def links = linked_issues.data.issues
                    echo " size of the array which has linked issue"+links.size()
                   
                    if(links.size() == issues_with_status.size())
                    {
                        echo "all the issues are linked have been already in desired state"
                        NOCHANGE_STATUS = "TRUE"
                    }
                    else{

                        echo "Execute step -- Jira Update To In Progress"
                        
                    }
                }
                catch(error){
                   
                    validate.rollback(JIRA_ISSUE_KEY, DEVELOPMENT_COMPLETE_KEY, SITE, PROJECT, IN_PROGRESS_ID)
                    throw Exception
                }


        
               
            }
        }
    }

     stage('Jira Update To Development Complete')
     {
    
            steps{
                script{
                    try{
                        if(NOCHANGE_STATUS=="FALSE")
                        {
                        
                            def linked_issues = jiraJqlSearch jql:"project = ${PROJECT} AND issue in linkedIssues(${JIRA_ISSUE_KEY})",site: "${SITE}"
                            def links = linked_issues.data.issues
                            echo "issue array size  is "+links.size()
                            for (i = 0; i <links.size(); i++) {  
                                echo "link issue "+links[i].key
                                echo "current status of the issue "+links[i]
                                echo "****************************************************************************"
                                // def res = httpRequest authentication: 'credentialsJira', contentType : "APPLICATION_JSON", url: "http://62.60.42.37:8080/rest/api/2/issue/PS-2?fields=status"
                                // println('Status: '+res.status)
                                // println('Response: '+res.content)
                                // println('jira status :'+res)
                                // def myObject = readJSON text: res.content
                                // echo "data"+myObject.fields.status.name
                                if(validate.checkStatus(IN_PROGRESS_KEY, "${JIRA_BASE_URL}${JIRA_REST_EXT}issue/${links[i].key}?fields=status", credential))
                                {
                                    validate.setTransitions(DEVELOPMENT_COMPLETE_ID, links[i].key, SITE)
                                    //check linked issues
                                    
                                    def link_issue_response = httpRequest authentication: 'credentialsJira', contentType : "APPLICATION_JSON", url: "${JIRA_BASE_URL}${JIRA_REST_EXT}issue/${links[i].key}?fields=issuelinks"
                                    def link_res_json = readJSON text: link_issue_response.content
                                    for(count = 0; count < link_res_json.fields.issuelinks.size(); count++)
                                    {
                                        println("---------------${count}--------------------")
                                        def link = link_res_json.fields.issuelinks[count]
                                        
                                        def issue_link_name =link.type.name
                                        println(' outwardIssue link  type  :'+issue_link_name)
                                        def issue_status = link.outwardIssue.fields.status.name
                                        println(' status of outwardIssue :'+issue_status)
                                        def issue_type = link.outwardIssue.fields.issuetype.name
                                        println(' type of outwardIssue :'+issue_type)
                                        def issue_key = link.outwardIssue.key
                                        println(' link outwardIssue issue key :'+issue_key)
                                        println('PARENT_ISSUE_TYPE '+ISSUE_TYPE_EPIC)
                                        println('PARENT_ISSUE_RELATE '+PARENT_ISSUE_RELATE)
                                        println('PARENT_ISSUE_STATUS '+PARENT_ISSUE_STATUS_IN_PRO)
                                        if(ISSUE_TYPE_EPIC == issue_type && PARENT_ISSUE_RELATE == issue_link_name && PARENT_ISSUE_STATUS_IN_PRO == issue_status)
                                        {
                                            println ( "met all conditions ")
                                            validate.setTransitions(DEVELOPMENT_COMPLETE, issue_key, SITE)
                                            break;
                                        }
                                    }
                                    
                                }
                                else
                                {
                                    echo "parent is already moved in "
                                }
                                
                            }
                        }
                    }
                    catch(error){
                     
                        validate.rollback(JIRA_ISSUE_KEY, IN_PROGRESS_KEY, SITE, PROJECT, TO_DO_ID)
                        throw Exception
                    }
                }
             }
         }
    // stage('Jira Update To Development Complete'){
    
    //         steps{
    //             script{
    //                 try{
    //                     if(NOCHANGE_STATUS=="FALSE")
    //                     {
    //                         def linked_issues = jiraJqlSearch jql:"project = ${PROJECT} AND issue in linkedIssues(${JIRA_ISSUE_KEY})",site: "${SITE}"
    //                         def links = linked_issues.data.issues
    //                         echo "issue array size  is "+links.size()
    //                         for (i = 0; i <links.size(); i++) {  
    //                             echo "link issue "+links[i].key
    //                             def linked_childern_issues = jiraJqlSearch jql:"project = ${PROJECT} AND issue in linkedIssues(${links[i].key})",site: "${SITE}"
    //                             def childern_links = linked_childern_issues.data.issues
    //                             for (j = 0; j < childern_links.size(); j++)
    //                             {
    //                                 echo "issue which is being checked "+childern_links[j].key
    //                                 def check_child_issue_status = jiraJqlSearch jql:"project = ${PROJECT} AND issue = ${childern_links[j].key} AND status = '${DEVELOPMENT_COMPLETE_KEY}'",site: "${SITE}"
    //                                 def list_check_child_issue_status = check_child_issue_status.data.issues
    //                                 echo " size of the array which has rollback issue"+list_check_child_issue_status.size()
    //                                 if(list_check_child_issue_status.size()  > 0  )
    //                                 {
    //                                     echo "issue is moved"
    //                                     NOCHANGE_STATUS = "FALSE"
    //                                 }
    //                                 else
    //                                 {
    //                                    echo "childern is still in In Progress state so cant move parent now"
    //                                    NOCHANGE_STATUS = "TRUE"
    //                                    break;
    //                                 }
                                   
    //                             }
    //                             if(NOCHANGE_STATUS=="FALSE")
    //                             {
    //                                 echo "status update for issue ${links[i].key}"
    //                                 validate.setTransitions(DEVELOPMENT_COMPLETE_ID, links[i].key, SITE)
    //                             }
                                
    //                         }
    //                     }
    //                 }
    //                 catch(error){
    //                    validate.rollback(JIRA_ISSUE_KEY, DEVELOPMENT_COMPLETE_KEY, SITE, PROJECT, IN_PROGRESS_ID)
    //                     throw Exception
    //                 }
    //             }
    //          }
    //      }
    }
}

